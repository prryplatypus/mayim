(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{435:function(t,s,e){"use strict";e.r(s);var a=e(65),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"writing-sql-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#writing-sql-files"}},[t._v("#")]),t._v(" Writing SQL files")]),t._v(" "),e("p",[t._v("Have you ever tried writing SQL statements in Python code? Its not a pleasant experience. ðŸ˜§ Wouldn't it just be nicer if you could write "),e("code",[t._v("*.sql")]),t._v(" files? Then those files could have all the nice features your IDE wants to offer with syntax highlighting, code execution, auto-suggestions, etc.")]),t._v(" "),e("p",[t._v("This part is not necessary, but to be honest is one of the really powerful features of Mayim so take advantage of it!")]),t._v(" "),e("h2",{attrs:{id:"where-to-save-your-sql-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#where-to-save-your-sql-files"}},[t._v("#")]),t._v(" Where to save your "),e("code",[t._v(".sql")]),t._v(" files?")]),t._v(" "),e("p",[t._v("Your SQL files should be located in a directory relative to the "),e("a",{attrs:{href:"executors"}},[t._v("Executor")]),t._v(" that is going to run them.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".\nâ”œâ”€â”€ queries\nâ”‚Â Â  â””â”€â”€ select_something.sql\nâ””â”€â”€ my_executor.py\n")])])]),e("p",[t._v("That means if you define an executor in "),e("code",[t._v("./my_executor.py")]),t._v(", then Mayim will look for SQL files in "),e("code",[t._v("./queries")]),t._v(". That is to say that it is looking based upon the parent diectory wherever the "),e("code",[t._v("Executor")]),t._v(" is defined.")]),t._v(" "),e("h3",{attrs:{id:"customizing-the-location"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#customizing-the-location"}},[t._v("#")]),t._v(" Customizing the location")]),t._v(" "),e("p",[t._v("You can change the location for where these files are located. This is easily handled by setting "),e("code",[t._v("Executor.path")]),t._v(" to the location where the SQL can be found.")]),t._v(" "),e("h4",{attrs:{id:"flat-directory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flat-directory"}},[t._v("#")]),t._v(" Flat directory")]),t._v(" "),e("p",[t._v("What if, for example, you want the SQL files and executor all in the same directory?")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".\nâ”œâ”€â”€ my_executor.py\nâ””â”€â”€ select_something.sql\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyExecutor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PostgresExecutor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    path "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("select_something")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Something"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("h4",{attrs:{id:"nested-directory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nested-directory"}},[t._v("#")]),t._v(" Nested directory")]),t._v(" "),e("p",[t._v("How about changing the name of the directory from "),e("code",[t._v("./queries")]),t._v(" to "),e("code",[t._v("./path/to/sql")]),t._v("?")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".\nâ”œâ”€â”€ path\nâ”‚   â””â”€â”€ to\nâ”‚       â””â”€â”€ sql\nâ”‚           â””â”€â”€ select_something.sql\nâ””â”€â”€ my_executor.py\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyExecutor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PostgresExecutor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    path "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./path/to/sql"')]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("select_something")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Something"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("h2",{attrs:{id:"how-to-name-your-sql-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-name-your-sql-files"}},[t._v("#")]),t._v(" How to name your "),e("code",[t._v(".sql")]),t._v(" files?")]),t._v(" "),e("p",[t._v("Mayim will look SQL files that start with one of the four (4) SQL verbs:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("select_<something>.sql")])]),t._v(" "),e("li",[e("code",[t._v("create_<something>.sql")])]),t._v(" "),e("li",[e("code",[t._v("update_<something>.sql")])]),t._v(" "),e("li",[e("code",[t._v("delete_<something>.sql")])])]),t._v(" "),e("p",[t._v("As you can see, usually you will simply name your methods and the SQL files the same.")]),t._v(" "),e("p",[e("strong",[t._v("Make sure you name your files properly.")])]),t._v(" "),e("p",[t._v("But, what if none of these names work for you? Mayim will also load any SQL files that are prefixed with a known prefix, for example: "),e("code",[t._v("mayim_<something>.sql")]),t._v(". Just note, if you do this then the "),e("code",[t._v("mayim_")]),t._v(" prefix is pulled off of the method name.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nâ”œâ”€â”€ queries\nâ”‚   â””â”€â”€ mayim_something"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql\nâ””â”€â”€ my_executor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyExecutor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PostgresExecutor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("something")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Something"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("p",[t._v("In this case, Mayim sees that there is a method named: "),e("code",[t._v("something")]),t._v(". Therefore, it will look for "),e("code",[t._v("mayim_something.sql")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"parameter-injection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameter-injection"}},[t._v("#")]),t._v(" Parameter injection")]),t._v(" "),e("p",[t._v("Mayim will inject parameters from the "),e("code",[t._v("Executor")]),t._v(" method into your SQL queries as named arguments. It follows a "),e("code",[t._v("$argument_name")]),t._v(" pattern as shown here:")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OFFSET")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("offset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CityExecutor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PostgresExecutor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("select_all_cities")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" limit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("City"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("p",[t._v("Notice how the "),e("code",[t._v("limit")]),t._v(" and "),e("code",[t._v("offset")]),t._v(" arguments in the method will be translated into "),e("code",[t._v("$limit")]),t._v(" and "),e("code",[t._v("$offset")]),t._v(" respectively.")]),t._v(" "),e("p",[t._v("Alternatively, you can use a positional style of query arguments:")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" city\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OFFSET")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("If you do this, you will need to make sure that the order of the method arguments correspond to the positional numbers being used.")])])}),[],!1,null,null,null);s.default=n.exports}}]);